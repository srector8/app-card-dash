# -*- coding: utf-8 -*-
"""App Card Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ga0mmKODgSxxiV1UFegIYMfuPLPGiOoX
"""

import pandas as pd
import altair as alt
import streamlit as st

def main():
    st.title("App Card Dashboard")
    st.write('Click-Through Rate Percentage - The percentage of clicks over the number of impressions')
    st.write('Unique Click-Through Rate Percentage - The percentage of unique clicks over the number of unique impressions')
    st.write('Utility Rating - The ratio of clicks to unique clicks')
    st.write('Exposure Rating - The ratio of impressions to unique impressions')

    # Function to load data
    def load_data(file):
        df = pd.read_csv(file)
        return df

    # Function to transform title
    def transform_title(title):
        if pd.isnull(title):
            return title
        else:
            return title.lower().title()

    # Streamlit file uploader
    uploaded_file = 'App_Card_Data_0527_with_dates.csv'

    if uploaded_file is not None:
        df = load_data(uploaded_file)

        # Convert 'DATE' column to datetime if it's not already
        df['date'] = pd.to_datetime(df['date'])

        # Renaming KPI's
        df.rename(columns={
            'CLICKS': 'Clicks',
            'IMPRESSIONS': 'Impressions',
            'CLICKTHROUGH_RATE_PERCENT': 'Click-Through Rate Percent',
            'UNIQUE_IMPRESSIONS': 'Unique Impressions',
            'UNIQUE_CLICKS': 'Unique Clicks',
            'UNIQUE_CLICKTHROUGH_RATE_PERCENT': 'Unique Click-Through Rate Percent',
            'EXPOSURE_RATING': 'Exposure Rating',
            'UTILITY_RATING': 'Utility Rating'
        }, inplace=True)

        # Apply the title transformation
        df['TITLE'] = df['TITLE'].apply(transform_title)

        # Filter titles with less than 20 date entries
        title_counts = df['TITLE'].value_counts()
        valid_titles = title_counts[title_counts >= 20].index.tolist()
        df = df[df['TITLE'].isin(valid_titles)]

        # List of card titles for dropdown
        card_titles = df['TITLE'].unique()

        # Streamlit selectbox for card titles
        card_title = st.selectbox('Select a card:', card_titles)

        # List of KPIs
        kpis = [
            "Clicks", "Impressions", "Click-Through Rate Percent",
            "Unique Impressions", "Unique Clicks",
            "Unique Click-Through Rate Percent", "Exposure Rating", "Utility Rating"
        ]

        # Streamlit selectbox for KPIs
        selected_kpi = st.selectbox('Select a KPI:', kpis)

        # Function to plot time series
        def plot_time_series(card_title, selected_kpi):
            card_data = df[df['TITLE'] == card_title]

            # Define the base chart
            base_chart = alt.Chart(card_data).mark_line().encode(
                x=alt.X('date:T', title='Date', axis=alt.Axis(format='%m/%d')),
                y=alt.Y(selected_kpi, title=selected_kpi.capitalize()),
                tooltip=['date:T', selected_kpi]
            ).properties(
                title=f"{selected_kpi} Time-Series for {card_title}",
                width=800,
                height=400
            )

            # Define vertical lines for 5/14 and 5/17
            rule_5_14 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-05-14')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_5_17 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-05-17')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_5_23 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-05-23')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_5_28 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-05-28')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_5_31 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-05-31')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_6_4 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-06-04')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_6_8 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-06-08')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_6_10 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-06-10')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_6_18 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-06-18')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_6_28 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-06-28')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_7_7 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-07-07')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_7_10 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-07-10')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_7_14 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-07-14')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_8_20 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-08-20')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_8_23 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-08-23')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_9_1 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-09-01')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_9_3 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-09-03')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_9_6 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-09-06')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_9_17 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-09-17')]})).mark_rule(color='red').encode(
                x='date:T'
            )
            rule_9_19 = alt.Chart(pd.DataFrame({'date': [pd.to_datetime('2024-09-19')]})).mark_rule(color='red').encode(
                x='date:T'
            )

            # Combine the base chart with the rules
            final_chart = base_chart + rule_5_14 + rule_5_17

            st.altair_chart(final_chart.interactive())

        # Plot the time series for the selected card title and KPI
        if card_title and selected_kpi:
            plot_time_series(card_title, selected_kpi)

if __name__ == "__main__":
    main()
